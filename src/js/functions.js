// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ arr - –º–∞—Å—Å–∏–≤, –ø—Ä–∏—á–µ–º –Ω–µ –ø—É—Å—Ç–æ–π
function isNotEmptyArray(arr) {
    return _.isArray(arr) && !_.isEmpty(arr);
}



function getGPT(prompt, assistants) {
    var res = $http.post("http://150.241.68.42:5000/gpt-query", {
        headers: { "accept": "application/json" },
        body: {
            prompt: prompt,
            assistants: assistants,
        }
    })
    if (res && res.isOk) return res.data.result;
    return null;
}




function returnData(link, data) {
    log('[+++] üß†üß†üß† data = ' + toPrettyString(data));

    $http.post(link, {
        headers: {
            'Content-Type': 'application/json'
        },
        body: data
    })

}



function findCitiesWithSubstring(substring) {
    var results = [];
    var lowerSubstring = String(substring).toLowerCase();

    for (var city in geo) {
        if (geo.hasOwnProperty(city)) {
            // —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ ¬´–≥–æ—Ä–æ–¥ == –ø–æ–¥—Å—Ç—Ä–æ–∫–∞¬ª –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
            if (city.toLowerCase() === lowerSubstring) {
                results.push({
                    locality: city,
                    region: geo[city]
                });
            }
        }
    }

    // –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥ ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Å–∞–º –æ–±—ä–µ–∫—Ç
    return results.length === 1 ? results[0] : results;
}


function fixMillionThousand($context) {
    var text = $context.request.query;

    // –°—Ä–∞–∑—É —á–∏—Å—Ç–∏–º –Å/—ë:
    text = text.replace(/—ë/g, "–µ").replace(/–Å/g, "–ï");

    // === (1) –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –®–ê–ì. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è "—á–µ—Ç—ã—Ä–µ—Ö—Å–æ—Ç" -> "—á–µ—Ç—ã—Ä–µ—Å—Ç–∞" –∏ —Ç.–ø. ===
    text = text.replace(
        /\b(–¥–≤—É—Ö|—Ç—Ä–µ—Ö|—Ç—Ä—ë—Ö|—á–µ—Ç—ã—Ä–µ—Ö|—á–µ—Ç—ã—Ä—ë—Ö|–ø—è—Ç–∏|—à–µ—Å—Ç–∏|—Å–µ–º–∏|–≤–æ—Å—å–º–∏|–¥–µ–≤—è—Ç–∏)—Å–æ—Ç\b/gi,
        function (_, prefix) {
            switch (prefix.toLowerCase()) {
                case "–¥–≤—É—Ö": return "–¥–≤–µ—Å—Ç–∏";
                case "—Ç—Ä–µ—Ö":
                case "—Ç—Ä—ë—Ö": return "—Ç—Ä–∏—Å—Ç–∞";
                case "—á–µ—Ç—ã—Ä–µ—Ö":
                case "—á–µ—Ç—ã—Ä—ë—Ö": return "—á–µ—Ç—ã—Ä–µ—Å—Ç–∞";
                case "–ø—è—Ç–∏": return "–ø—è—Ç—å—Å–æ—Ç";
                case "—à–µ—Å—Ç–∏": return "—à–µ—Å—Ç—å—Å–æ—Ç";
                case "—Å–µ–º–∏": return "—Å–µ–º—å—Å–æ—Ç";
                case "–≤–æ—Å—å–º–∏": return "–≤–æ—Å–µ–º—å—Å–æ—Ç";
                case "–¥–µ–≤—è—Ç–∏": return "–¥–µ–≤—è—Ç—å—Å–æ—Ç";
            }
        }
    );

    // === (2) "—Ç—ã—Å—è—á —Å—Ç–æ" -> "—Å—Ç–æ —Ç—ã—Å—è—á" –∏ —Ç.–ø.
    text = text.replace(
        /\b—Ç—ã—Å—è—á\s+(—Å—Ç–æ|–¥–≤–µ—Å—Ç–∏|—Ç—Ä–∏—Å—Ç–∞|—á–µ—Ç—ã—Ä–µ—Å—Ç–∞|–ø—è—Ç—å—Å–æ—Ç|—à–µ—Å—Ç—å—Å–æ—Ç|—Å–µ–º—å—Å–æ—Ç|–≤–æ—Å–µ–º—å—Å–æ—Ç|–¥–µ–≤—è—Ç—å—Å–æ—Ç)\b/gi,
        "$1 —Ç—ã—Å—è—á"
    );

    // === (3) –í–∞—à–∏ pattern1, pattern2, numberWords, parseMultiWordNumber, replacer1, replacer2 ===

    var pattern1 = /(?:^|[^–ê-–Ø–∞-—è–Å—ë])(–º–∏–ª–ª–∏–æ–Ω[–∞-—è—ë]*|—Ç—ã—Å—è—á[–∞-—è—ë]*)\s+(?:–∏\s+)?((?:\d+|[–ê-–Ø–∞-—è–Å—ë]+)(?:\s+(?:\d+|[–ê-–Ø–∞-—è–Å—ë]+)*))(?=$|[^–ê-–Ø–∞-—è–Å—ë])/gi;
    var pattern2 = /(?:^|[^–ê-–Ø–∞-—è–Å—ë])((?:\d+|[–ê-–Ø–∞-—è–Å—ë]+)(?:\s+(?:\d+|[–ê-–Ø–∞-—è–Å—ë]+)*))\s+(?:–∏\s+)?(–º–∏–ª–ª–∏–æ–Ω[–∞-—è—ë]*|—Ç—ã—Å—è—á[–∞-—è—ë]*)?(?=$|[^–ê-–Ø–∞-—è–Å—ë])/gi;

    var numberWords = { /* –≤–∞—à —Å–ª–æ–≤–∞—Ä—å —á–∏—Å–µ–ª */ };
    function getNumericValue(word) { /* —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –∫–∞–∫ —É –≤–∞—Å */ }
    function parseMultiWordNumber(phrase) { /* —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –∫–∞–∫ —É –≤–∞—Å */ }

    function replacer1(match, group1, group2) {
        var isMillion = group1.toLowerCase().startsWith("–º–∏–ª–ª–∏–æ–Ω");
        var multiplier = isMillion ? 1000000 : 1000;
        var num = parseMultiWordNumber(group2);
        if (!num) return match;
        // "–º–∏–ª–ª–∏–æ–Ω —Ç—Ä–∏—Å—Ç–∞" => "1 300 000"
        if (isMillion && num < 1000) {
            return String(1000000 + num * 1000);
        }
        return String(num * multiplier);
    }

    function replacer2(match, group1, group2) {
        var isMillion = group2 && group2.toLowerCase().startsWith("–º–∏–ª–ª–∏–æ–Ω");
        var multiplier = isMillion ? 1000000 : 1000;
        var num = parseMultiWordNumber(group1);
        if (!num) return match;
        return String(num * multiplier);
    }

    text = text.replace(pattern1, replacer1);
    text = text.replace(pattern2, replacer2);

    // === (4) –î–æ–ø. –ø—Ä–æ—Ö–æ–¥: —Å–∫–ª–µ–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ (>=100) –º–µ–∂–¥—É –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª –∏–ª–∏ "–∏ " ===
    var unifyPattern = /(\d{3,})\s+(?:–∏\s+)?(\d{3,})/g;
    var replaced;
    do {
        replaced = false;
        text = text.replace(unifyPattern, function (_match, g1, g2) {
            replaced = true;
            return String(parseInt(g1, 10) + parseInt(g2, 10));
        });
    } while (replaced);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    $context.request.query = text;
}




function shiftHundredsToThousands(num) {
    // 1) –°–∫–æ–ª—å–∫–æ –º–∏–ª–ª–∏–æ–Ω–æ–≤
    var millions = Math.floor(num / 1000000);
    // 2) –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –º–∏–ª–ª–∏–æ–Ω–æ–≤
    var remainder = num % 1000000;

    // 3) –°–∫–æ–ª—å–∫–æ —Ç—ã—Å—è—á –≤ –æ—Å—Ç–∞—Ç–∫–µ
    var thousands = Math.floor(remainder / 1000);
    // 4) –û—Å—Ç–∞–ª–æ—Å—å —Å–æ—Ç–µ–Ω + –¥–µ—Å—è—Ç–∫–æ–≤ + –µ–¥–∏–Ω–∏—Ü
    var hundredsAndBelow = remainder % 1000;

    // 5) –ï—Å–ª–∏ —Ç—ã—Å—è—á–∏ == 0, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –í–°–Æ —á–∞—Å—Ç—å hundredsAndBelow –∫ —Ç—ã—Å—è—á–∞–º
    if (thousands === 0 && hundredsAndBelow > 0) {
        thousands = hundredsAndBelow;
        hundredsAndBelow = 0;
    }

    // 6) –°–æ–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ –æ–±—Ä–∞—Ç–Ω–æ
    var result = millions * 1000000
        + thousands * 1000
        + hundredsAndBelow;

    return result;
}



function sumDucklingNumbers(obj) {
    if (!obj || !obj["duckling.number"] || !Array.isArray(obj["duckling.number"])) {
        return 0; // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    }

    // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è value –≤–Ω—É—Ç—Ä–∏ duckling.number
    return obj["duckling.number"].reduce(function (sum, item) {
        if (!item || typeof item.value !== "number") {
            return sum; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        }

        var value = item.value < 1000 ? item.value * 1000 : item.value;
        return sum + value;
    }, 0);
}


/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ DaData –¥–ª—è –æ—á–∏—Å—Ç–∫–∏/—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞.
 * https://dadata.ru/api/geocode/
 * @param {String} address - –ê–¥—Ä–µ—Å
 * @returns {Array|null} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ—Ä–≤–∏—Å–∞  –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
 */
function getAddress(address) {

    var url = "https://cleaner.dadata.ru/api/v1/clean/address";
    var apiKey = $.injector.api.dadata.apiKey;
    var secretKey = $.injector.api.dadata.secretKey;
    var res = $http.post(url, {
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "Authorization": "Token " + apiKey,
            "X-Secret": secretKey
        },
        body: [address]
    });
    if (res && res.isOk) return res.data;
    return null;
}


/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –ª–µ–∂–∏—Ç –∞—É–¥–∏–æ —Ä–µ–ø–ª–∏–∫–∏ 
 * 
 * @param {String} name - –∏–º—è –∫–æ—Ç–æ—Ä–æ–µ –æ–∑–≤—É—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 * @returns {String|null} - –°—Å—ã–ª–∫–∞ –∏–ª–∏ null, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç
 */
function getNameUrl(inputName) {

    var nameYaml = userName.name;
    var url = userName.url; // + akhmed.wav
    var inputName = inputName.toLowerCase().replace("—ë", "–µ");

    for (var n in nameYaml) {

        var lowercaseArray = _.map(nameYaml[n], function (name) {
            return name.toLowerCase().replace("—ë", "–µ")
        });

        if (_.contains(lowercaseArray, inputName)) {
            return url + n + '.wav'
        }
    }
    return null;
}


/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–∞
 */
function sendPartnerLead(name, phone, question, city_id, audioLink) {

    var name = name;
    var phone = phone;
    var question = question;
    var city_id = city_id;

    var headers = { "Content-Type": "application/x-www-form-urlencoded" }

    var form = {
        "edata[phone]": phone,
        "edata[question]": question,
        "edata[name]": name,
        "edata[cd-referral]": "94f62be214ac507199e27eba420eae24",
        "edata[secret]": "ab40a992710370521bb24a1dc19e3921",
        "edata[city_id]": city_id,
        "edata[putm_medium]": audioLink,
        "edata[putm_content]": "JustAI"
    }
    
    // "https://leads-reception.feedot.com/api/v1/partner-leads"
    // https://admin.feedot.com/index/exportlog
    var res = $http.post("https://leads-reception.feedot.com/api/v1/partner-leads", {
        headers: headers,
        form: form
    })
    log('[+++] üß†üß†üß† headers = ' + toPrettyString(headers));
    log('[+++] üß†üß†üß† form = ' + toPrettyString(form));
    log('[+++] üß†üß†üß† sendPartnerLead = ' + toPrettyString(res));

    if (res && res.isOk) return true;
    return null;
}

/**
 * –ü–æ–ª—É—á–∞–µ–º id –≥–æ—Ä–æ–¥–∞
 */

function getCityId(city) { 

    var url = "https://api.my.feedot.com/rest/v1/cities?prefix=" + city

    var res = $http.get(url, {
        headers: { "Content-Type": "application/json" },
    })

    if (res && res.isOk) return res.data.data.cities;
    return null;


}